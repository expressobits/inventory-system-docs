{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Inventory System Docs","text":"<p>We are currently improving all documentation to improve your experience with the plugin!</p> <p>Getting Started Features Tutorials</p>"},{"location":"introduction/","title":"Introduction","text":""},{"location":"introduction/#addon-features","title":"Addon Features","text":"<p>The inventory system addon currently contains:</p>"},{"location":"introduction/#core","title":"Core","text":"<p>Scripts with logical inventory system (Including node scripts for using Inventory)</p> <p>Located in the core folder.</p>"},{"location":"introduction/#craft-system","title":"Craft System","text":"<p>Core-based system that implements item creation logic (including node scripts such as Crafter)</p> <p>Located in the craft folder.</p>"},{"location":"introduction/#features-editor","title":"Features Editor","text":"<p>Scripts that display a custom editor for editing addon features.</p> <p>Located in the editor folder.</p>"},{"location":"introduction/#multiplayer-features","title":"Multiplayer Features","text":"<p>Scripts that extend core and craft scripts creating a version that is compatible with Godot 4's high-level network.</p> <p>Located in the multiplayer folder</p>"},{"location":"introduction/#ui","title":"UI","text":"<p>Content connecting the addon node logic with the user interface. Attention: This feature is not mandatory, in the FPS example the use of a closet is demonstrated so that a UI is not necessary to show the contents of the inventory. Some developers tend to confuse an inventory system with UI features.</p>"},{"location":"introduction/#icons","title":"Icons","text":"<p>Folder that includes icons to be displayed by resources or the editor.</p>"},{"location":"introduction/#demo-features","title":"Demo Features","text":"<p>The inventory system demo has other extra features, these should be used as an example of a possible implementation of the addon:</p>"},{"location":"introduction/#base","title":"Base","text":"<p>Folder that contains the resources created for example, such as items, recipes, craft stations, categories and the database (database.tres) A script is also included here that configures the inputs for the demo to work (default_actions.gd and setup_keys.gd)</p>"},{"location":"introduction/#fps","title":"FPS","text":"<p>Folder containing scripts to demonstrate a first person singleplayer. This includes droppable items, items that remain in the player's hand, level, materials and props. There is also some specific logic added here, such as campfire.gd.</p>"},{"location":"introduction/#mp","title":"MP","text":"<p>Folder that extends FPS features for high-level network demonstration of Godot 4.</p>"},{"location":"introduction/#assets","title":"Assets","text":"<p>Folder containing graphic resources for the example, most resources are authored by Kenney (https://kenney.nl/)</p>"},{"location":"basics/creating_category/","title":"Creating category","text":"<p>You can use item categories to highlight a slot that only accepts that type of item. </p>"},{"location":"basics/creating_category/#creating-category","title":"Creating Category","text":"<p>Note: Creating by inventory editor or without, results in the same resource database within the data.</p>"},{"location":"basics/creating_category/#create-a-category-with-inventory-editor","title":"Create a category with Inventory Editor","text":"<ol> <li>Open Inventory Editor</li> </ol> <ol> <li>Open a item database</li> </ol> <ol> <li>Create new item category in last top button</li> </ol> <ol> <li>Edit a new category created</li> </ol>"},{"location":"basics/creating_category/#create-a-item-category-without-inventory-editor","title":"Create a Item Category without Inventory Editor","text":"<ol> <li>Create item category resource</li> </ol> <ol> <li>Edit a new category created</li> </ol> <ol> <li>Add new category to database resource</li> </ol>"},{"location":"basics/creating_category/#adding-a-category-to-an-item","title":"Adding a Category to an Item","text":"<p>Note: Adding a Category by inventory editor or without, results in the same resource database within the data.</p>"},{"location":"basics/creating_category/#adding-a-category-to-an-item-with-inventory-editor","title":"Adding a Category to an Item with Inventory Editor","text":"<ol> <li>Open the item you want to put your category</li> </ol> <ol> <li>Check the categories this item has</li> </ol>"},{"location":"basics/creating_category/#adding-a-category-to-an-item-without-inventory-editor","title":"Adding a Category to an Item without Inventory Editor","text":"<p>TODO</p> <ol> <li>Open the item you want to put your category</li> </ol>"},{"location":"basics/creating_database/","title":"Creating database","text":"<p>Creating Inventory Database</p> <ol> <li>Go to Inventory in top view of godot editor</li> </ol> <p></p> <ol> <li>In this part you will see the editor empty, we will add the key file for adding any resource to the inventory system, the Inventory Database.</li> </ol> <p></p> <ol> <li>Select the add icon to open the window to create a new database.</li> </ol> <p></p> <ol> <li>Choose the name of your database and Select Ok(Normally a simple project will have no more than one database, that is, a name like 'database' would already be suggested)</li> </ol> <p></p> <ol> <li>Now we can see that the editor screen has changed, showing 4 icons available in the editor, to add a new item, recipe, craft-station and category respectively.</li> </ol> <p></p> <p>From now on we can follow the tutorial to add any of these features: * [TODO] Add Inventory Items * [TODO] Add Recipes * [TODO] Add Craft-Station * [TODO] Add Item Category</p>"},{"location":"basics/creating_items/","title":"Creating items","text":""},{"location":"basics/creating_items/#create-resource-item-definition","title":"Create Resource Item Definition","text":"<p>To create new items in a database, select the \"New Item\" option</p> <p></p> <p>Here we have two options, one creates the ItemDefinition resource and also adds it to the open database, the other has the option of choosing an ItemDefinition resource that already exists in the project. For this tutorial choose the first option, which creates a new resource and adds it to the database.</p> <p></p> <p>Choose name of ItemDefinition and your location: </p> <p>If created successfully your editor will update to show the item in the \"Items\" tab </p>"},{"location":"basics/creating_items/#setup-new-item-definition","title":"Setup New Item Definition","text":"<p>Here we can demonstrate a little of the editor. It contains various information about the item: - Name: Name to be displayed or used as additional identification (It is your responsibility to use this field) - ID: Integer identification of the item, used to get the item based on a list of items easily using the id Note: The base node (NodeInventories) has two methods that use the database field (InventoryDatabase) that use this id to facilitate access to items</p> <pre><code># Get id of item\nint get_id_from_item(item: ItemDefinition)\n# Get resource (ItemDefinition) from id param\nItemDefinition get_item_from_id(id: int)\n</code></pre>"},{"location":"basics/using_database/","title":"Using database","text":"<p>This page demonstrates how an inventory database is used by the addon nodes.</p> <p>After creating a database and filling it with information, such as items, you can start using it in your project through nodes that extend <code>NodeInventorySystemBase</code>: * Inventory * Hotbar * InventoryHandler * Crafter * CraftStation</p> <p>Let's take an example of adding an inventory node, after adding it we get a warning warning that we need to configure the database for this node</p> <p></p> <p></p> <p>See the inventory node inspector, there we have the base class with the database property waiting to be configured:</p> <p></p> <p>Select the previously created database:</p> <p></p> <p>Okay, now all items that will be added to the inventory will correspond to the database</p> <p>Continue to the next tutorials: [TODO] Using the Inventory node</p>"},{"location":"contributing/","title":"TODO","text":""},{"location":"contributing/cmake_support/","title":"CMake support","text":""},{"location":"contributing/cmake_support/#git-submodule-setup-in-main-repository","title":"git submodule setup in main repository","text":"<p><code>git submodule init</code> <code>git submodule update</code></p>"},{"location":"contributing/cmake_support/#cmake-configure-in-main-repository","title":"cmake configure in main repository","text":"<p><code>cmake -GNinja -DCMAKE_BUILD_TYPE=Debug -B cmake-build-debug .</code></p> <p>Define variables GODOTCPP_PRECISION=single|double and/or BITS=32|64 for further build variants if needed.</p>"},{"location":"contributing/cmake_support/#cmake-buildinstall-in-specified-build-folder-cmake-build-debug","title":"cmake build/install in specified build folder cmake-build-debug","text":"<p><code>cmake --build . --target install --config Debug</code></p> <p>This installs the built library in the bin folder of the repository.</p>"},{"location":"features/database/","title":"Database","text":"<p>The database is a resource that contains all information about items, recipes, craft stations and item categories. To use the inventory system you need to have at least one resource created in your project.</p> <p>Note: The demo already includes an example database, it is possible to use it, it is in the folder addons/inventory-system/demos/base/database.tres</p> <ul> <li>Create a Inventory Database</li> <li>Use Inventory Database</li> </ul>"},{"location":"features/item_definition/","title":"Item Definition","text":""},{"location":"features/item_definition/#editor","title":"Editor","text":"<ul> <li> <p><code>ID</code>: String identification of the item, used to get the item based on a list of items easily using the id.         You can use the button to edit the id correctly, it will indicate in red if the id already exists.</p> <p>Note</p> <p>The base node (NodeInventories) has two methods that use the database field (InventoryDatabase) that use this id to facilitate access to items</p> <pre><code># Get id of item\nint get_id_from_item(item: ItemDefinition)\n\n# Get resource (ItemDefinition) from id param\nItemDefinition get_item_from_id(id: int)\n</code></pre> </li> <li> <p><code>Icon</code>: Texture to display your item in-game and in the editor</p> </li> <li><code>Name</code>: Name to be displayed or used as additional identification (It is your responsibility to use this field)</li> </ul>"},{"location":"getting_started/installation/","title":"Installation and Setup","text":""},{"location":"getting_started/installation/#installing","title":"Installing","text":"<p>There are two ways to install the plugin, via godot asset lib and via submodule</p>"},{"location":"getting_started/installation/#a-installing-via-godot-asset-lib","title":"A. Installing via Godot Asset Lib","text":"<p>Enter in Asset Lib on top view of Godot:</p> <p></p> <p>Search for the \"Inventory System\" plugin</p> <p></p> <p>Select Download</p> <p></p> <p>Select Install for add addon in your project.</p> <p></p>"},{"location":"getting_started/installation/#b-install-via-git-modules","title":"B. Install via Git Modules","text":"<p>Open a terminal in your project folder</p> <p>Type command for add submodule</p> <pre><code>git submodule add https://github.com/expressobits/inventory-system.git addons/inventory-system\n</code></pre> <ol> <li>Type command for start submodule</li> </ol> <pre><code>git submodule update --init --recursive\n</code></pre>"},{"location":"getting_started/installation/#active-plugin-after-install","title":"Active Plugin after install","text":"<p>After installing, you may need to restart godot and then activate it in ProjectSettings</p> <p></p>"},{"location":"getting_started/introduction/","title":"Introduction","text":"<p>Inventory System is a plugin for Godot 4 made in C++ that has a grid system, multiplayer friendly, UI separated from logic, modular, simple crafting system. Made and ready for your game!</p> <p>Made in GDExtension and placed as a plugin, it allows all codes to be run with high performance of C++, without you having to recompile Godot.</p>"},{"location":"getting_started/introduction/#features","title":"Features","text":"<ul> <li>\u2714\ufe0f Inventory with Item Stacks.</li> <li>\u2714\ufe0f Separate UI inventory logic.</li> <li>\u2714\ufe0f First Person demo with chests.</li> </ul> <ul> <li>\u2714\ufe0f Item Definition as Extendable Resource.</li> <li>\u2714\ufe0f Demonstrations of dropped items and item pickup.</li> <li>\u2714\ufe0f Multiplayer compatible (Including example).</li> <li>\u2714\ufe0f Hotbar.</li> <li>\u2714\ufe0f Craft System.</li> <li>\u2714\ufe0f Item Editor.</li> <li>\u2714\ufe0f Categories. (https://github.com/expressobits/inventory-system/issues/5)</li> <li>\u2714\ufe0f Specialized slot category inventory. (https://github.com/expressobits/inventory-system/issues/40)</li> <li>\u2714\ufe0f Autocrafts. (https://github.com/expressobits/inventory-system/issues/34)</li> <li>\u2714\ufe0f Unconventional inventory. https://github.com/expressobits/inventory-system/issues/32</li> <li>\u2714\ufe0f Inventory with grids like RE4. (https://github.com/expressobits/inventory-system/issues/35)</li> <li>\u2714\ufe0f Equipament Inventory</li> </ul>"},{"location":"getting_started/introduction/#branchs","title":"Branchs","text":"<p>There are three branches on github:</p> Branch Description <code>main</code>  Branch with core of plugin, with C++ GDextension source <code>addon</code>  Branch with files directly corresponding to a download of the godot asset lib plugin <code>module</code>  Branch with the submodule version of the addon <p>Demos only addon branch</p> <p>The demonstrations shown in the images with a first-person game are inside the addons/inventory-system-demos folder which is in the addon branch only.</p>"},{"location":"getting_started/quickstart/add_item_to_database/","title":"Create Item Definition","text":""},{"location":"getting_started/quickstart/add_item_to_database/#creating","title":"Creating","text":"<p>To create new items in a database, select the \"New Item\" option</p> <p></p> <p>If created successfully your editor will update to show the item in the Item Definitions tab </p>"},{"location":"getting_started/quickstart/add_item_to_database/#setup-new-item-definition","title":"Setup New Item Definition","text":"<p>Define your item's settings, the most essential ones for this start are id, name and whether your item stacks</p> <p>See more about item definition on Item Definition.</p> <p>For this quick start we put a wood with 16 stack, this will be used for the next steps of this guide. </p>"},{"location":"getting_started/quickstart/add_items_to_inventory/","title":"Add items to Inventory","text":"<p>In this guide we will start to see the nodes of this plugin, the first and most important is the Inventory Node, it is used to store your items.</p> <p>Grid Inventory</p> <p>There is also a GridInventory node in the module that extends the Inventory node, it stores and manages items based on a grid using the grid_size attributes of the item definitions.</p>"},{"location":"getting_started/quickstart/add_items_to_inventory/#setup","title":"Setup","text":"<p>Let's start with an empty scene</p> <p></p> <p>Add an inventory node, the inventory node is the main structure of this addon.</p> <p>Note: Understanding the basics is important to understand the flexibility of this addon.</p> <p></p> <p>After adding the node, it will display a warning indicating that it needs to configure its database.</p> <p>Inventory Database data structure</p> <p>The InventoryDatabase is where the item structures and their attributes will be saved, important data, for example, an item's identifier, are contained within this resource.</p> <p>This tutorial does not cover the database, we will use the database already available in the demo, to understand more about Inventory Database, check the tutorials about it.</p> <p></p> <p>Define the database, it should look like this.</p> <p></p> <p>In the node inspector, we can see the current inventory stacks, we will use it to view what is available within the inventory. Don't change anything now.</p> <p>Create a test script on the parent node of the inventory node, it will be used for all our tests from now on.</p> <p></p> <p>Let's add keys for interaction in this tutorial, to do this open the top menu \"Project\" -&gt; \"ProjectSettings\" -&gt; Access the \"InputMap\" tab</p> <p>Inventory System Demo Keys</p> <p>It is only necessary to create it if you do not have the inventory-system-demos folder, if it was added, it automatically adds keys to your project.</p> <p></p> <p>Add the keys you will need for this guide:</p> Key Input Name E interact F1 add_item_a <p>If you don't know how to add it, you can see this guide from the godot documentation: Input Examples in Godot Docs</p>"},{"location":"getting_started/quickstart/add_items_to_inventory/#showing-inventory-items","title":"Showing inventory items","text":"<p>Let's now show the items in this inventory with a simple command.</p> <p>Let's create a variable pointing to the inventory, dragging it to the script while holding the Ctrl key.</p> <p></p> <p>We added code to display stacks each time we click the configured action \"interact\" which in the demo is the E key inventory_tutorial.gd<pre><code>func _process(delta):\n    if Input.is_action_just_pressed(\"interact\"):\n        print(\"Inventory Stacks:\")\n        for stack in inventory.stacks:\n            print(\"A Stack\")\n</code></pre></p> <p>The result is this: <pre><code>Inventory Stacks:\nA Stack\nA Stack\nA Stack\nA Stack\nA Stack\nA Stack\nA Stack\nA Stack\nA Stack\nA Stack\nA Stack\nA Stack\nA Stack\nA Stack\nA Stack\nA Stack\n</code></pre></p> <p>Modify the code now to display when there is an item in the stack, its id and quantity, if not it displays the message \"Empty\" inventory_tutorial.gd<pre><code>func _process(delta):\n    if Input.is_action_just_pressed(\"interact\"):\n        print(\"Inventory Stacks:\")\n        for stack in inventory.stacks:\n            if stack.item != null:\n                print(stack.item_id,\" x \", stack.amount)\n            else:\n                print(\"Empty\")\n</code></pre></p>"},{"location":"getting_started/quickstart/add_items_to_inventory/#add-items-to-inventory_1","title":"Add Items to Inventory","text":"<p>Let's configure an item to be added, add a variable to link an item to the script, so we can add it to the inventory: inventory_tutorial.gd<pre><code>...\n@onready var inventory = $Inventory\n\n# Add this \ud83d\udc47\n@export var item_id : String = \"wood\"\n\n# Called when the node enters the scene tree for the first time.\nfunc _ready():\n...\n</code></pre></p> <p>We added code that adds an item each time we click the F1 key inventory_tutorial.gd<pre><code>            print(stack.item_id,\" x \", stack.amount)\n            else:\n                print(\"Empty\")\n        # Add this \ud83d\udc47\n    if Input.is_action_just_pressed(\"add_item_a\"):\n        inventory.add(item_id, 1)\n</code></pre></p> <p>Now after typing F1 (key that adds item configured in the demo) and then E (interaction key configured in the demo), you can see that an item has been added to the inventory. <pre><code>Inventory Stacks:\nWood x 1\nEmpty\nEmpty\nEmpty\nEmpty\nEmpty\nEmpty\nEmpty\nEmpty\nEmpty\nEmpty\nEmpty\nEmpty\nEmpty\nEmpty\nEmpty\n</code></pre></p>"},{"location":"getting_started/quickstart/create_database/","title":"Creating a <code>Database</code>","text":"<p>This guide shows how to create a new database, the demo (inventory-system-demos/base folder) in the addon already contains a database used in fps-demo. Database is a resource that will manage project-level information about items, recipes, and craft stations. It contains lists of internal resources for each data type. </p> <p>Note</p> <p>You can edit it via Godot's own inspector, but we recommend using the plugin's own editor for this.</p> <p>Go to Inventory in top view of godot editor</p> <p></p> <p>Inventory tab does not exist?</p> <p>If the Inventory tab above does not appear, it means that your plugin was not installed correctly or that it was not active in the Project Settings, check the Instalation</p> <p>In this part you will see the editor empty, we will add the key file for adding any resource to the inventory system, the Inventory Database.</p> <p></p> <p>Select the new database option to open the window to create a new database.</p> <p></p> <p>Choose the name of your database and Select Ok(Normally a simple project will have no more than one database, that is, a name like 'database' would already be suggested)</p> <p></p> <p>Now we can see that the editor screen has changed, showing 4 icons available in the editor, to add a new item, recipe, craft-station and category respectively.</p> <p></p>"},{"location":"tutorials/how_to_test_multiplayer_demo/","title":"How to test multiplayer demo","text":"<ol> <li>Open Project Settings</li> </ol> <ol> <li>Select the \"Run\" option</li> </ol> <ol> <li>In the \"Main Scene\" choose the mp_demo.tscn which is in res://addons/inventory-system/demos/mp</li> </ol> <ol> <li>Now in the \"Debug\" menu choose more than one instance to run</li> </ol> <ol> <li>That's it, now it's enough to host the server and other clients connect, currently it is previously configured for a localhost connection.</li> </ol>"}]}